#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt for NewifiD2

on: workflow_dispatch
#on:
#  repository_dispatch:
#  release:
#    types: published
#  push:
#    branches:
#      - main
#    paths:
#      - '.config'
#  schedule:
#    - cron: 0 8 * * 5
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: newifid2.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-18.04

    steps:
    - name: 准备开始
      uses: actions/checkout@main

    - name: 初始化系统环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "::set-output name=date::$(date +'%m/%d_%Y_%H/%M')"
        echo "::set-output name=date2::$(date +'%m/%d %Y')"
        echo "::set-output name=date3::$(date +'%m.%d')"


    - name: 下载固件源代码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 下载额外的插件
      run: |
        cd openwrt
        sudo mkdir -p myfeeds
        sudo chown $USER:$GROUPS ./myfeeds        
        chmod +x $GITHUB_WORKSPACE/myfeeds.sh
        $GITHUB_WORKSPACE/myfeeds.sh

    - name: 加载 feeds.conf.default && DIY_P1
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 下载 feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装 feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义固件配置 && DIY_P2
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH 链接
      uses: P3TERX/debugger-action@main
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: 下载编译环境包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 开始编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        # grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/CONFIG_TARGET_(.*)_DEVICE_generic=y/\1/' > DEVICE_NAME
        echo "newifid2" > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "::set-output name=DEVICE_NAME::_$(cat DEVICE_NAME)"
        echo "::set-output name=FILE_DATE::_$(date +"%Y%m%d%H%M")"

    - name: 检查空间使用
      if: (!cancelled())
      run: df -hT

    - name: 上载 bin 目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 清理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-output name=FIRMWARE::$PWD"
        echo "::set-output name=status::success"

    - name: 上传固件
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 上传固件至 cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        cowurl=$(./transfer cow --block 2621440 -s --no-progress ${FIRMWARE})
        cowurl=$(echo $cowurl | grep -o -E "https[^ ]*")
        echo "::set-output name=COWURL::$cowurl"
        echo "Download Link: $cowurl 🚀"
        echo "::warning file=cowtransfer.com::$cowurl 🚀"

        # ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        # echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"

    - name: 上传固件至 WeTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        curl -fsSL git.io/file-transfer | sh
        wetrans=$(./transfer wet -s -p 16 --no-progress ${FIRMWARE})
        wetrans=$(echo $wetransurl | grep -o -E "https[^ ]*")
        echo "::set-output name=WETRANSURL::$wetransurl"
        echo "Download Link: $wetrans 🚀"
        echo "::warning file=wetransfer.com::$wetransurl 🚀"
        
        #./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        #echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"

    - name: 建立标签信息
      id: create_release
      uses: actions/create-release@main
      continue-on-error: true
      if: env.REPO_TOKEN && env.UPLOAD_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        tag_name: ${{ env.date }}_${{ env.DEVICE_NAME }}
        release_name: ${{ env.date2 }} ${{ env.DEVICE_NAME }}
        body: |
            国内加速下载🔥:

            奶牛快传: ${{ env.COWURL }} 🚀 
            
            WeTransfer: ${{ env.WETRANSURL }} 🚀            
        draft: false
        prerelease: false
    
    - name: 更新 Release
      uses: csexton/release-asset-action@master
      continue-on-error: true      
      if: env.REPO_TOKEN && env.UPLOAD_RELEASE == 'true'
      with:
        pattern: "${{ env.FIRMWARE }}/*"
        github-token: ${{ secrets.REPO_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
